{"version":3,"sources":["context.js","components/BrewButton/index.styles.js","components/BrewButton/index.js","utils/helpers.js","components/BrewCounter/index.js","components/ResetButton/index.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["defaultContext","limit","periods","process","split","map","i","React","ActionButton","styled","Button","_templateObject","BrewButton","_ref","disabled","start","stop","step","time","_React$useState","_React$useState2","Object","slicedToArray","intervalId","setIntervalId","_React$useState3","_React$useState4","timer","setTimer","clearInterval","react","color","onClick","setInterval","prevTimer","Row","Col","getText","isFinite","minutes","Math","floor","seconds","concat","slice","toMinutesAndSeconds","BrewCounter","count","react_default","a","createElement","ResetButton","props","outline","reset","MainContainer","Container","App_styles_templateObject","App","_React$useContext","AppContext","setDisabled","setCount","_React$useState5","_React$useState6","currentStep","setCurrentStep","components_BrewButton","console","log","prevCount","components_BrewCounter","components_ResetButton","Boolean","window","location","hostname","match","ReactDOM","render","context","Provider","value","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7efe62b7.chunk.js","sourcesContent":["// @flow\r\nimport * as React from 'react';\r\n\r\ntype DefaultContext = {\r\n  limit: number,\r\n  periods: Array<number>,\r\n};\r\n\r\nconst periods = process.env.REACT_APP_PERIODS ? process.env.REACT_APP_PERIODS.split(' ').map(i => +i) : [\r\n  30000,  // 30 sec\r\n  180000, // 3 min\r\n  210000, // 3 min 30 sec\r\n  240000, // 4 min\r\n  270000, // 4 min 30 sec\r\n  300000 // 5 min\r\n];\r\n\r\nexport const defaultContext: DefaultContext = {\r\n  limit: 5,\r\n  periods\r\n};\r\n\r\nexport default React.createContext<DefaultContext>();\r\n","import styled from 'styled-components';\r\nimport { Button } from 'reactstrap';\r\n\r\nexport const ActionButton = styled(Button)`\r\n  width: 300px;\r\n  height: 300px;\r\n  border-radius: 50%;\r\n`;\r\n","// @flow\r\nimport * as React from 'react';\r\nimport { Row, Col, Button, Spinner } from 'reactstrap';\r\n\r\nimport { ActionButton } from './index.styles';\r\nimport { toMinutesAndSeconds } from '../../utils/helpers';\r\n\r\ntype Props = {\r\n  disabled: boolean,\r\n  step: number,\r\n  start: Function,\r\n  stop: Function,\r\n  time: number\r\n};\r\n\r\nconst BrewButton = ({ disabled, start, stop, step, time }: Props) => {\r\n  const [intervalId, setIntervalId] = React.useState(null);\r\n  const [timer, setTimer] = React.useState(time);\r\n\r\n  React.useEffect(() => {\r\n    // Checking if it's time to stop timer\r\n    if (timer <= 0 && intervalId) {\r\n      clearInterval(intervalId);\r\n      setIntervalId(null);\r\n      stop();\r\n    }\r\n    // Updating timer after every step increase\r\n    if (!intervalId && !timer) {\r\n      setTimer(time);\r\n    }\r\n  }, [timer, time]);\r\n\r\n  const handleClick = () => {\r\n    // Clearing any existing interval\r\n    clearInterval(intervalId);\r\n    start();\r\n\r\n    setIntervalId(\r\n      setInterval(() => {\r\n        // Update timer\r\n        setTimer(prevTimer => prevTimer - 1000);\r\n      }, 1000)\r\n    );\r\n  };\r\n\r\n  const getText = () => {\r\n    if (intervalId) {\r\n      return 'Brewing...';\r\n    }\r\n\r\n    switch (step) {\r\n      case 0:\r\n        return 'Prepare';\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n      case 4:\r\n      case 5:\r\n        return 'Brew';\r\n      default:\r\n        return 'Refresh';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ActionButton color={'primary'} disabled={disabled} onClick={handleClick}>\r\n      <Row>\r\n        <Col>\r\n          {getText()}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {toMinutesAndSeconds(timer)}\r\n        </Col>\r\n      </Row>\r\n    </ActionButton>\r\n  );\r\n};\r\n\r\nexport default BrewButton;\r\n","// @flow\r\n/**\r\n * Function converts number to string with minutes and seconds\r\n * @function toMinutesAndSeconds\r\n * @param {number} time - a number which should be positive and 59 minutes 59 seconds as a maximum\r\n * @returns {string}\r\n */\r\nexport const toMinutesAndSeconds = (time: number): string => {\r\n  // Setting limit to 59 minutes 59 seconds\r\n  const limit = 60 * 60 * 1000 - 1000;\r\n\r\n  if (time === null || !isFinite(time) || time < 0 || time > limit) {\r\n    return '00:00';\r\n  }\r\n\r\n  const minutes = Math.floor(time / (60 * 1000));\r\n  const seconds = (time - minutes * 60 * 1000) / 1000;\r\n\r\n  return `${('0' + minutes).slice(-2)}:${('0' + seconds).slice(-2)}`;\r\n};\r\n","// @flow\r\nimport React from 'react';\r\n\r\nconst BrewCounter = ({ count }) => {\r\n    return (\r\n        <div>Count: {count}</div>\r\n    );\r\n};\r\n\r\nexport default BrewCounter;","// @flow\r\nimport React from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\n// import { Button } from './index.styles';\r\n\r\ntype Props = {\r\n  disabled: boolean,\r\n  reset: Function\r\n};\r\n\r\nconst ResetButton = (props: Props) => (\r\n  <Button outline color={'secondary'} disabled={props.disabled} onClick={props.reset}>Reset</Button>\r\n);\r\n\r\nexport default ResetButton;\r\n","import styled from 'styled-components';\r\nimport { Container } from 'reactstrap';\r\n\r\nexport const MainContainer = styled(Container)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n`;\r\n","// @flow\r\nimport * as React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nimport AppContext from './context';\r\n\r\nimport BrewButton from './components/BrewButton';\r\nimport BrewCounter from './components/BrewCounter';\r\nimport ResetButton from './components/ResetButton';\r\n\r\nimport { MainContainer } from './App.styles';\r\n\r\nconst App = () => {\r\n  // Initial data from context\r\n  const { limit, periods } = React.useContext(AppContext);\r\n  const [disabled, setDisabled] = React.useState(false);\r\n  const [count, setCount] = React.useState(0);\r\n  const [currentStep, setCurrentStep] = React.useState(0);\r\n\r\n  const start = () => {\r\n    if (disabled) {\r\n      return;\r\n    }\r\n    console.log('start timer');\r\n    setDisabled(true);\r\n  };\r\n\r\n  const stop = () => {\r\n    console.log('stop timer');\r\n    setDisabled(count + 1 >= limit);\r\n    if (currentStep > 0) {\r\n      setCount(prevCount => prevCount + 1);\r\n    }\r\n    setCurrentStep(currentStep + 1);\r\n  };\r\n\r\n  const reset = () => {\r\n    console.log('reset timer');\r\n    setCurrentStep(0);\r\n    setCount(0);\r\n    setDisabled(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <MainContainer>\r\n      <Row>\r\n        <Col>\r\n          <BrewButton\r\n            start={start}\r\n            stop={stop}\r\n            disabled={disabled}\r\n            step={currentStep}\r\n            time={periods[currentStep]}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <BrewCounter count={count}/>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <ResetButton\r\n            reset={reset}\r\n            disabled={(disabled || count === 0) && count < limit}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppContext, { defaultContext }  from './context';\r\n\r\nReactDOM.render(\r\n  <AppContext.Provider value={defaultContext}>\r\n    <App />\r\n  </AppContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}